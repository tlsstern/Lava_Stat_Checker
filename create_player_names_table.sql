-- Create a separate player_names table for this project
CREATE TABLE IF NOT EXISTS player_names (
    uuid TEXT PRIMARY KEY,
    player_name TEXT NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create index for faster lookups
CREATE INDEX idx_player_names_name ON player_names(player_name);

-- Enable RLS
ALTER TABLE public.player_names ENABLE ROW LEVEL SECURITY;

-- Create policies for public access
CREATE POLICY "Public read access for player_names" ON public.player_names FOR SELECT USING (true);
CREATE POLICY "Public insert access for player_names" ON public.player_names FOR INSERT WITH CHECK (true);
CREATE POLICY "Public update access for player_names" ON public.player_names FOR UPDATE USING (true);

-- Drop and recreate the stats table to reference player_names instead
DROP TABLE IF EXISTS stats CASCADE;

CREATE TABLE stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    player_uuid TEXT NOT NULL REFERENCES public.player_names(uuid) ON DELETE CASCADE,
    player_name TEXT NOT NULL,
    
    -- Core stats
    level INT,
    exp BIGINT,
    wins INT,
    losses INT,
    wlr DECIMAL(10, 2),
    finals INT,
    final_deaths INT,
    fkdr DECIMAL(10, 2),
    beds_broken INT,
    beds_lost INT,
    bblr DECIMAL(10, 2),
    kills INT,
    deaths INT,
    kdr DECIMAL(10, 2),
    winrate DECIMAL(10, 2),
    finals_per_star DECIMAL(10, 2),
    
    -- Detailed stats JSON
    detailed_stats JSONB,
    
    -- Metadata
    fetched_from TEXT, -- 'api' or 'scraper'
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for faster queries
CREATE INDEX idx_stats_player_uuid ON stats(player_uuid);
CREATE INDEX idx_stats_player_name ON stats(player_name);
CREATE INDEX idx_stats_updated_at ON stats(updated_at DESC);

-- Enable RLS
ALTER TABLE public.stats ENABLE ROW LEVEL SECURITY;

-- Create policies for public access
CREATE POLICY "Public read access for stats" ON public.stats FOR SELECT USING (true);
CREATE POLICY "Public insert access for stats" ON public.stats FOR INSERT WITH CHECK (true);
CREATE POLICY "Public update access for stats" ON public.stats FOR UPDATE USING (true);
CREATE POLICY "Public delete access for stats" ON public.stats FOR DELETE USING (true);

-- Drop existing functions first
DROP FUNCTION IF EXISTS get_latest_stats(TEXT);
DROP FUNCTION IF EXISTS get_latest_stats_by_ign(TEXT);

-- Recreate the function to get latest stats
CREATE FUNCTION get_latest_stats(p_uuid TEXT)
RETURNS TABLE (
    player_uuid TEXT,
    player_name TEXT,
    level INT,
    exp BIGINT,
    wins INT,
    losses INT,
    wlr DECIMAL,
    finals INT,
    final_deaths INT,
    fkdr DECIMAL,
    beds_broken INT,
    beds_lost INT,
    bblr DECIMAL,
    kills INT,
    deaths INT,
    kdr DECIMAL,
    winrate DECIMAL,
    finals_per_star DECIMAL,
    detailed_stats JSONB,
    fetched_from TEXT,
    updated_at TIMESTAMPTZ
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        s.player_uuid,
        s.player_name,
        s.level,
        s.exp,
        s.wins,
        s.losses,
        s.wlr,
        s.finals,
        s.final_deaths,
        s.fkdr,
        s.beds_broken,
        s.beds_lost,
        s.bblr,
        s.kills,
        s.deaths,
        s.kdr,
        s.winrate,
        s.finals_per_star,
        s.detailed_stats,
        s.fetched_from,
        s.updated_at
    FROM stats s
    WHERE s.player_uuid = p_uuid
    ORDER BY s.updated_at DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- Recreate function to get latest stats by name
CREATE FUNCTION get_latest_stats_by_ign(p_ign TEXT)
RETURNS TABLE (
    player_uuid TEXT,
    player_name TEXT,
    level INT,
    exp BIGINT,
    wins INT,
    losses INT,
    wlr DECIMAL,
    finals INT,
    final_deaths INT,
    fkdr DECIMAL,
    beds_broken INT,
    beds_lost INT,
    bblr DECIMAL,
    kills INT,
    deaths INT,
    kdr DECIMAL,
    winrate DECIMAL,
    finals_per_star DECIMAL,
    detailed_stats JSONB,
    fetched_from TEXT,
    updated_at TIMESTAMPTZ
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        s.player_uuid,
        s.player_name,
        s.level,
        s.exp,
        s.wins,
        s.losses,
        s.wlr,
        s.finals,
        s.final_deaths,
        s.fkdr,
        s.beds_broken,
        s.beds_lost,
        s.bblr,
        s.kills,
        s.deaths,
        s.kdr,
        s.winrate,
        s.finals_per_star,
        s.detailed_stats,
        s.fetched_from,
        s.updated_at
    FROM stats s
    WHERE LOWER(s.player_name) = LOWER(p_ign)
    ORDER BY s.updated_at DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;